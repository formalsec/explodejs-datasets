const path = require('path');
const fs = require('fs');
const lunr = require('lunr');
const minimatch = require('minimatch');
const generateLunrClientJS = function (outDir, language = 'en') {
    const v1 = Array.isArray(language);
    const v2 = language.length;
    const v3 = v2 === 1;
    const v4 = v1 && v3;
    if (v4) {
        language = language[0];
    }
    const v5 = '// THIS FILE IS AUTOGENERATED\n' + '// DO NOT EDIT THIS FILE!\n\n';
    let lunrClient = v5 + 'import * as lunr from "lunr";\n';
    const v6 = language !== 'en';
    if (v6) {
        const v7 = require('lunr-languages/lunr.stemmer.support');
        const v8 = v7(lunr);
        v8;
        lunrClient += 'require("lunr-languages/lunr.stemmer.support")(lunr);\n';
        const v9 = Array.isArray(language);
        if (v9) {
            const v11 = code => {
                const v10 = code !== 'en';
                return v10;
            };
            const v12 = language.filter(v11);
            const v21 = code => {
                const v13 = code === 'ja';
                const v14 = code === 'jp';
                const v15 = v13 || v14;
                if (v15) {
                    const v16 = require('lunr-languages/tinyseg');
                    const v17 = v16(lunr);
                    v17;
                    lunrClient += 'require("lunr-languages/tinyseg")(lunr);\n';
                }
                const v18 = `lunr-languages/lunr.${ code }`;
                const v19 = require(v18);
                const v20 = v19(lunr);
                v20;
                lunrClient += `require("lunr-languages/lunr.${ code }")(lunr);\n`;
            };
            const v22 = v12.forEach(v21);
            v22;
            const v23 = require('lunr-languages/lunr.multi');
            const v24 = v23(lunr);
            v24;
            lunrClient += `require("lunr-languages/lunr.multi")(lunr);\n`;
        } else {
            const v25 = `lunr-languages/lunr.${ language }`;
            const v26 = require(v25);
            const v27 = v26(lunr);
            v27;
            lunrClient += `require("lunr-languages/lunr.${ language }")(lunr);\n`;
        }
    }
    lunrClient += `export default lunr;\n`;
    const lunrClientPath = path.join(outDir, 'lunr.client.js');
    const v28 = fs.writeFileSync(lunrClientPath, lunrClient);
    v28;
    const v29 = language !== 'en';
    if (v29) {
        const v30 = Array.isArray(language);
        if (v30) {
            const v31 = lunr.multiLanguage(...language);
            return v31;
        } else {
            const v32 = lunr[language];
            return v32;
        }
    }
    return null;
};
const getFilePaths = function (routesPaths, outDir, baseUrl, options = {}) {
    const files = [];
    const addedFiles = new Set();
    const v33 = options;
    const v34 = [];
    const excludeRoutes = v33.undefined;
    const indexBaseUrl = v33.undefined;
    const meta = {};
    meta.excludedCount = 0;
    const v60 = route => {
        const v35 = route === `${ baseUrl }404.html`;
        if (v35) {
            return;
        }
        const isBaseUrl = route === baseUrl;
        const v36 = !indexBaseUrl;
        const v37 = isBaseUrl && v36;
        if (v37) {
            return;
        }
        const v38 = baseUrl.length;
        const v39 = route.substring(v38);
        const v40 = [
            route,
            v39
        ];
        const v45 = route => {
            const v41 = `${ route }.html`;
            const v42 = path.join(outDir, v41);
            const v43 = path.join(outDir, route, 'index.html');
            const v44 = [
                v42,
                v43
            ];
            return v44;
        };
        const candidatePaths = v40.flatMap(v45);
        const v46 = fs.existsSync;
        const filePath = candidatePaths.find(v46);
        const v47 = fs.existsSync(filePath);
        const v48 = !v47;
        if (v48) {
            const v49 = `docusaurus-lunr-search: could not resolve file for route '${ route }', it will be missing in the search index`;
            const v50 = console.warn(v49);
            v50;
        }
        const v51 = addedFiles.has(filePath);
        if (v51) {
            return;
        }
        const v53 = excludePattern => {
            const v52 = minimatch(route, excludePattern);
            return v52;
        };
        const v54 = excludeRoutes.some(v53);
        if (v54) {
            const v55 = meta.excludedCount;
            const v56 = v55++;
            v56;
            return;
        }
        const v57 = {
            path: filePath,
            url: route
        };
        const v58 = files.push(v57);
        v58;
        const v59 = addedFiles.add(filePath);
        v59;
    };
    const v61 = routesPaths.forEach(v60);
    v61;
    const v62 = [
        files,
        meta
    ];
    return v62;
};
const v63 = {};
v63.generateLunrClientJS = generateLunrClientJS;
v63.getFilePaths = getFilePaths;
module.exports = v63;