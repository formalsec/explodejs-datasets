'use strict';
var i18n = function (t) {
    const v233 = {};
    const v234 = this && (this.__version = '2.0.0');
    t = t || v233, v234;
    const v235 = typeof document;
    const v236 = 'undefined' != v235;
    const v237 = document.documentElement;
    const v238 = v237.getAttribute('lang');
    const v239 = v236 && v238;
    const v240 = v239 || 'en';
    const v244 = function (t) {
        const v241 = 1 != t;
        let v242;
        if (v241) {
            v242 = 1;
        } else {
            v242 = 0;
        }
        const v243 = {};
        v243.nplurals = 2;
        v243.plural = v242;
        return v243;
    };
    const v245 = String.fromCharCode(4);
    var r = {};
    r.domain = 'messages';
    r.locale = v240;
    r.plural_func = v244;
    r.ctxt_delimiter = v245;
    var e = function (t) {
        const v246 = typeof t;
        var r = v246;
        const v247 = 'function' === r;
        const v248 = 'object' === r;
        const v249 = !t;
        const v250 = !v249;
        const v251 = v248 && v250;
        const v252 = v247 || v251;
        return v252;
    };
    var n = {};
    const v253 = t.locale;
    const v254 = r.locale;
    var l = v253 || v254;
    const v255 = t.domain;
    const v256 = r.domain;
    var a = v255 || v256;
    var o = {};
    var i = {};
    const v257 = t.ctxt_delimiter;
    const v258 = r.ctxt_delimiter;
    var u = v257 || v258;
    const v259 = t.messages;
    const v260 = {};
    const v261 = o[a];
    const v262 = t.messages;
    const v263 = v259 && (o[a] = v260, v261[l] = v262);
    const v264 = t.plural_forms;
    const v265 = t.plural_forms;
    const v266 = v264 && (i[l] = v265);
    v263, v266;
    var s = function (t) {
        var r = arguments;
        const v267 = t.replace(/%%/g, '%% ');
        const v269 = function (t, e) {
            const v268 = r[e];
            return v268;
        };
        const v270 = v267.replace(/%(\d+)/g, v269);
        const v271 = v270.replace(/%% /g, '%');
        return v271;
    };
    var p = function (t) {
        const v272 = -1;
        const v273 = t.indexOf(u);
        const v274 = v272 !== v273;
        const v275 = t.split(u);
        const v276 = v275[1];
        let v277;
        if (v274) {
            v277 = v276;
        } else {
            v277 = t;
        }
        return v277;
    };
    var c = function (t) {
        var r = [t];
        var e = t.lastIndexOf('-');
        let v278 = e > 0;
        while (v278) {
            const v279 = r.push(t);
            t = t.slice(0, e), v279, e = t.lastIndexOf('-');
            v278 = e > 0;
        }
        return r;
    };
    var f = function (t) {
        var r = (t = t.replace('_', '-')).search(/[.@]/);
        const v280 = -1;
        const v281 = v280 != r;
        const v282 = v281 && (t = t.slice(0, r));
        return v282, t;
    };
    var d = function (t) {
        const v283 = new RegExp('^\\s*nplurals\\s*=\\s*[0-9]+\\s*;\\s*plural\\s*=\\s*(?:\\s|[-\\?\\|&=!<>+*/%:;n0-9_()])+');
        const v284 = v283.test(t);
        const v285 = !v284;
        if (v285) {
            const v286 = s('The plural form "%1" is not valid', t);
            const v287 = new Error(v286);
            throw v287;
        }
        const v288 = 'var plural, nplurals; ' + t;
        const v289 = v288 + ' return { nplurals: nplurals, plural: (plural === true ? 1 : (plural ? plural : 0)) };';
        const v290 = new Function('n', v289);
        return v290;
    };
    var g = function (t, r, e) {
        const v291 = e.plural_form;
        const v292 = e.plural_func;
        const v293 = n[l];
        const v294 = i[l];
        const v295 = d(v294);
        const v296 = v293 || (n[l] = v295);
        let v297;
        if (v292) {
            a = e.plural_func(r);
            v297 = a;
        } else {
            v297 = (v296, a = n[l](r));
        }
        const v298 = void 0;
        const v299 = a.plural;
        const v300 = v298 === v299;
        const v301 = a.plural;
        const v302 = a.nplurals;
        const v303 = v301 > v302;
        const v304 = v300 || v303;
        const v305 = t.length;
        const v306 = a.plural;
        const v307 = v305 <= v306;
        const v308 = v304 || v307;
        const v309 = v308 && (a.plural = 0);
        const v310 = a.plural;
        const v311 = t[v310];
        const v312 = p(v311);
        const v313 = [v312];
        const v314 = Array.prototype;
        const v315 = v314.slice;
        const v316 = v315.call(arguments, 3);
        const v317 = v313.concat(v316);
        const v318 = s.apply(this, v317);
        const v319 = t[0];
        const v320 = p(v319);
        const v321 = [v320];
        const v322 = Array.prototype;
        const v323 = v322.slice;
        const v324 = v323.call(arguments, 3);
        const v325 = v321.concat(v324);
        const v326 = s.apply(this, v325);
        let v327;
        if (v291) {
            v327 = (v297, v309, v318);
        } else {
            v327 = v326;
        }
        return v327;
        var a;
    };
    const v330 = function () {
        const v328 = this.gettext;
        const v329 = v328.apply(this, arguments);
        return v329;
    };
    const v333 = function () {
        const v331 = this.ngettext;
        const v332 = v331.apply(this, arguments);
        return v332;
    };
    const v336 = function () {
        const v334 = this.pgettext;
        const v335 = v334.apply(this, arguments);
        return v335;
    };
    const v357 = function (t, r, n, l) {
        const v337 = !t;
        const v338 = !r;
        const v339 = v337 || v338;
        const v340 = !n;
        const v341 = v339 || v340;
        if (v341) {
            const v342 = new Error('You must provide a domain, a locale and messages');
            throw v342;
        }
        const v343 = typeof t;
        const v344 = 'string' != v343;
        const v345 = typeof r;
        const v346 = 'string' != v345;
        const v347 = v344 || v346;
        const v348 = e(n);
        const v349 = !v348;
        const v350 = v347 || v349;
        if (v350) {
            const v351 = new Error('Invalid arguments');
            throw v351;
        }
        const v352 = l && (i[r] = l);
        const v353 = o[t];
        const v354 = {};
        const v355 = v353 || (o[t] = v354);
        const v356 = o[t];
        return r = f(r), v352, v355, v356[r] = n, this;
    };
    const v378 = function (t, n) {
        const v358 = e(t);
        const v359 = v358 || (t = JSON.parse(t));
        const v360 = t[''];
        const v361 = !v360;
        const v362 = t[''];
        const v363 = v362.language;
        const v364 = !v363;
        const v365 = v361 || v364;
        const v366 = t[''];
        const v367 = v366['plural-forms'];
        const v368 = !v367;
        const v369 = v365 || v368;
        if (v359, v369) {
            const v370 = new Error('Wrong JSON, it must have an empty key ("") with "language" and "plural-forms" information');
            throw v370;
        }
        var l = t[''];
        const v371 = t[''];
        const v372 = delete v371;
        const v373 = r.domain;
        const v374 = n || v373;
        const v375 = l.language;
        const v376 = l['plural-forms'];
        const v377 = this.setMessages(v374, v375, t, v376);
        return v372, v377;
    };
    const v379 = function (t) {
        return l = f(t), this;
    };
    const v380 = function () {
        return l;
    };
    const v382 = function (t) {
        let v381;
        if (t) {
            v381 = (a = t, this);
        } else {
            v381 = a;
        }
        return v381;
    };
    const v394 = function (t) {
        const v383 = this.dcnpgettext;
        const v384 = void 0;
        const v385 = void 0;
        const v386 = void 0;
        const v387 = void 0;
        const v388 = [
            v384,
            v385,
            t,
            v386,
            v387
        ];
        const v389 = Array.prototype;
        const v390 = v389.slice;
        const v391 = v390.call(arguments, 1);
        const v392 = v388.concat(v391);
        const v393 = v383.apply(this, v392);
        return v393;
    };
    const v404 = function (t, r, e) {
        const v395 = this.dcnpgettext;
        const v396 = void 0;
        const v397 = void 0;
        const v398 = [
            v396,
            v397,
            t,
            r,
            e
        ];
        const v399 = Array.prototype;
        const v400 = v399.slice;
        const v401 = v400.call(arguments, 3);
        const v402 = v398.concat(v401);
        const v403 = v395.apply(this, v402);
        return v403;
    };
    const v415 = function (t, r) {
        const v405 = this.dcnpgettext;
        const v406 = void 0;
        const v407 = void 0;
        const v408 = void 0;
        const v409 = [
            v406,
            t,
            r,
            v407,
            v408
        ];
        const v410 = Array.prototype;
        const v411 = v410.slice;
        const v412 = v411.call(arguments, 2);
        const v413 = v409.concat(v412);
        const v414 = v405.apply(this, v413);
        return v414;
    };
    const v463 = function (t, e, n, i, s) {
        const v416 = typeof n;
        const v417 = 'string' != v416;
        if (t = t || a, v417) {
            const v418 = this.strfmt('Msgid "%1" is not a valid translatable string', n);
            const v419 = new Error(v418);
            throw v419;
        }
        var p;
        var f;
        var d;
        const v420 = !1;
        var h = {};
        h.plural_form = v420;
        let m;
        const v421 = e + u;
        const v422 = v421 + n;
        if (e) {
            m = v422;
        } else {
            m = n;
        }
        var y = c(l);
        let v;
        for (v in y) {
            const v423 = o[t];
            const v424 = o[t];
            const v425 = v424[d];
            const v426 = v423 && v425;
            const v427 = o[t];
            const v428 = v427[d];
            const v429 = v428[m];
            const v430 = o[t];
            const v431 = v430[d];
            const v432 = v431[m];
            const v433 = typeof v432;
            const v434 = 'string' != v433;
            const v435 = f && v434;
            const v436 = o[t];
            const v437 = v436[d];
            const v438 = v437[m];
            const v439 = typeof v438;
            const v440 = 'string' == v439;
            const v441 = f && v440;
            if (i) {
                f = v435;
            } else {
                f = v441;
            }
            if (d = y[v], f = v426 && v429, f) {
                break;
            }
        }
        const v442 = o[t];
        const v443 = v442[d];
        const v444 = r.plural_func;
        let v445;
        if (f) {
            p = v443[m];
            v445 = p;
        } else {
            v445 = (p = n, h.plural_func = v444);
        }
        const v446 = !0;
        const v447 = [
            n,
            i
        ];
        let v448;
        if (f) {
            v448 = p;
        } else {
            v448 = v447;
        }
        const v449 = [
            v448,
            s,
            h
        ];
        const v450 = Array.prototype;
        const v451 = v450.slice;
        const v452 = v451.call(arguments, 5);
        const v453 = v449.concat(v452);
        const v454 = g.apply(this, v453);
        const v455 = [p];
        const v456 = [
            v455,
            s,
            h
        ];
        const v457 = Array.prototype;
        const v458 = v457.slice;
        const v459 = v458.call(arguments, 5);
        const v460 = v456.concat(v459);
        const v461 = g.apply(this, v460);
        let v462;
        if (i) {
            v462 = (h.plural_form = v446, v454);
        } else {
            v462 = v461;
        }
        return v445, v462;
    };
    const v464 = {};
    v464.strfmt = s;
    v464.expand_locale = c;
    v464.__ = v330;
    v464._n = v333;
    v464._p = v336;
    v464.setMessages = v357;
    v464.loadJSON = v378;
    v464.setLocale = v379;
    v464.getLocale = v380;
    v464.textdomain = v382;
    v464.gettext = v394;
    v464.ngettext = v404;
    v464.pgettext = v415;
    v464.dcnpgettext = v463;
    return v464;
};
module.exports = i18n;