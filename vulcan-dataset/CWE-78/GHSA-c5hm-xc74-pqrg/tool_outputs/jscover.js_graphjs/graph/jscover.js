'use strict';
const v71 = require('debug');
var debug = v71('jscover');
const v72 = require('child_process');
var exec = v72.exec;
var path = require('path');
var ndir = require('ndir');
var fse = require('fs-extra');
var fs = require('fs');
var root = path.dirname(__dirname);
const v73 = process.env;
const v74 = v73.JSCOVER;
const v75 = path.join(root, 'bin', 'JSCover-all.jar');
var JSCoverPath = v74 || v75;
var JSCoverLogging = path.join(root, 'bin', 'logging.properties');
const v76 = '-Djava.util.logging.config.file="' + JSCoverLogging;
const v77 = v76 + '"';
const v78 = '-jar "' + JSCoverPath;
const v79 = v78 + '"';
const v80 = [
    'java',
    '-Dfile.encoding=UTF-8',
    v77,
    v79,
    '-fs'
];
var JSCoverCommand = v80.join(' ');
var PEDDING = '/* ****** automatically generated by jscover - do not edit ******/\nif (typeof _$jscoverage === \'undefined\') { _$jscoverage = {}; }\n/* ****** end - do not edit ******/\n';
const jscover = function (source, target, options, callback) {
    source = source || '';
    target = target || '';
    const v81 = [];
    options = options || v81;
    const v82 = Date.now();
    var tmpName = '__cov__' + v82;
    const v83 = process.env;
    const v84 = v83.TMPDIR;
    var tmpdir = v84 || '/tmp';
    var tmpTargetDir = path.join(tmpdir, tmpName);
    const v85 = path.basename(target);
    var tmpTarget = path.join(tmpTargetDir, v85);
    var cleanup = function () {
        const v86 = fse.removeSync(tmpTargetDir);
        v86;
        const v87 = path.join(target, tmpName);
        const v88 = fse.removeSync(v87);
        v88;
    };
    var cmd = JSCoverCommand;
    const v89 = options.length;
    const v90 = v89 > 0;
    const v91 = options && v90;
    if (v91) {
        const v92 = options.join(' ');
        cmd += ' ' + v92;
    }
    cmd += ' --exclude=node_modules --exclude=.git/ --exclude=.svn/';
    const v93 = ' --exclude="' + tmpTarget;
    const v94 = v93 + '" --exclude="';
    const v95 = v94 + target;
    cmd += v95 + '"';
    const v96 = ' "' + source;
    const v97 = v96 + '" "';
    const v98 = v97 + tmpTarget;
    cmd += v98 + '"';
    const v99 = debug(cmd);
    v99;
    const v140 = function (err, stdout, stderr) {
        var output = '';
        if (stdout) {
            output += stdout;
        }
        if (stderr) {
            output += stderr;
            const v100 = !err;
            if (v100) {
                const v101 = stderr.trim();
                err = new Error(v101);
            }
            const v102 = err.name;
            err.name = 'JSCover' + v102;
        }
        if (err) {
            const v103 = debug(err, stderr);
            v103;
            const v104 = cleanup();
            v104;
            const v105 = callback(err, output);
            return v105;
        }
        const v106 = !stdout;
        const v107 = !stderr;
        var success = v106 && v107;
        const v108 = !success;
        if (v108) {
            const v109 = callback(null, output);
            return v109;
        }
        const v131 = function onDir(dirpath, items) {
            var todir = dirpath.replace(tmpTarget, target);
            const v110 = fse.mkdirpSync(todir);
            v110;
            var i = 0;
            const v111 = items.length;
            let v112 = i < v111;
            while (v112) {
                var info = items[i];
                var from = info[0];
                var name = path.basename(from);
                const v114 = name === '.git';
                const v115 = name === '.svn';
                const v116 = v114 || v115;
                const v117 = name.indexOf('jscoverage');
                const v118 = v117 === 0;
                const v119 = v116 || v118;
                if (v119) {
                    continue;
                }
                const v120 = path.basename(from);
                var to = path.join(todir, v120);
                const v121 = info[1];
                const v122 = v121.isDirectory();
                if (v122) {
                    const v123 = fse.mkdirpSync(to);
                    v123;
                } else {
                    const v124 = info[1];
                    const v125 = v124.isFile();
                    if (v125) {
                        var content = fs.readFileSync(from);
                        const v126 = path.extname(to);
                        const v127 = v126.toLowerCase();
                        const v128 = v127 === '.js';
                        if (v128) {
                            const v129 = content.toString();
                            content = PEDDING + v129;
                        }
                        const v130 = fs.writeFileSync(to, content);
                        v130;
                    }
                }
                const v113 = i++;
                v112 = i < v111;
            }
        };
        const v134 = function end() {
            const v132 = cleanup();
            v132;
            const v133 = callback();
            v133;
        };
        const v138 = function error(err, errPath) {
            const v135 = cleanup();
            v135;
            const v136 = console.error('%s error: %s', errPath, err);
            v136;
            const v137 = callback(err);
            v137;
        };
        const v139 = ndir.walk(tmpTarget, v131, v134, v138);
        v139;
    };
    var child = exec(cmd, v140);
};
module.exports = jscover;